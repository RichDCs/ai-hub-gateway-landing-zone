<fragment>
	<retry condition="@(context.Response != null && (context.Response.StatusCode == 429 || context.Response.StatusCode >= 500) && ((Int32)context.Variables["remainingBackends"]) > 0)" count="3" interval="0">
		<!-- Before picking the backend, let's verify if there is any that should be set to not throttling anymore -->
		<set-variable name="oaClusters" value="@{
                JArray backends = (JArray)context.Variables["oaClusters"];

                for (int i = 0; i < backends.Count; i++)
                {
                    JObject backend = (JObject)backends[i];

                    if (backend.Value<bool>("isThrottling") && DateTime.Now >= backend.Value<DateTime>("retryAfter"))
                    {
                        backend["isThrottling"] = false;
                        backend["retryAfter"] = DateTime.MinValue;
                    }
                }

                return backends; 
            }" />
		<cache-store-value key="oaClusters" value="@((JArray)context.Variables["oaClusters"])" duration="60" />
		<!-- This is the main logic to pick the backend to be used -->
		<set-variable name="backendIndex" value="@{
                JArray backends = (JArray)context.Variables["oaClusters"];

                int selectedPriority = Int32.MaxValue;
                List<int> availableBackends = new List<int>();

                for (int i = 0; i < backends.Count; i++)
                {
                    JObject backend = (JObject)backends[i];

                    if (!backend.Value<bool>("isThrottling"))
                    {
                        int backendPriority = backend.Value<int>("priority");

                        if (backendPriority < selectedPriority)
                        {
                            selectedPriority = backendPriority;
                            availableBackends.Clear();
                            availableBackends.Add(i);
                        } 
                        else if (backendPriority == selectedPriority)
                        {
                            availableBackends.Add(i);
                        }
                    }
                }

                if (availableBackends.Count == 1)
                {
                    return availableBackends[0];
                }
            
                if (availableBackends.Count > 0)
                {
                    //Returns a random backend from the list if we have more than one available with the same priority
                    return availableBackends[new Random().Next(0, availableBackends.Count)];
                }
                else
                {
                    //If there are no available backends, the request will be sent to the first one
                    return 0;    
                }
                }" />
		<set-variable name="backendUrl" value="@(((JObject)((JArray)context.Variables["oaClusters"])[(Int32)context.Variables["backendIndex"]]).Value<string>("url") + "/openai")" />
		<set-backend-service base-url="@((string)context.Variables["backendUrl"])" />
		<forward-request buffer-request-body="true" />
		<choose>
			<!-- In case we got 429 or 5xx from a backend, update the list with its status -->
			<when condition="@(context.Response != null && (context.Response.StatusCode == 429 || context.Response.StatusCode >= 500) )">
				<cache-lookup-value key="oaClusters" variable-name="oaClusters" />
				<set-variable name="oaClusters" value="@{
                        JArray backends = (JArray)context.Variables["oaClusters"];
                        int currentBackendIndex = context.Variables.GetValueOrDefault<int>("backendIndex");
                        int retryAfter = Convert.ToInt32(context.Response.Headers.GetValueOrDefault("Retry-After", "-1"));

                        if (retryAfter == -1)
                        {
                            retryAfter = Convert.ToInt32(context.Response.Headers.GetValueOrDefault("x-ratelimit-reset-requests", "-1"));
                        }

                        if (retryAfter == -1)
                        {
                            retryAfter = Convert.ToInt32(context.Response.Headers.GetValueOrDefault("x-ratelimit-reset-tokens", "10"));
                        }

                        JObject backend = (JObject)backends[currentBackendIndex];
                        backend["isThrottling"] = true;
                        backend["retryAfter"] = DateTime.Now.AddSeconds(retryAfter);

                        return backends;      
                    }" />
				<cache-store-value key="oaClusters" value="@((JArray)context.Variables["oaClusters"])" duration="60" />
				<set-variable name="remainingBackends" value="@{
                        JArray backends = (JArray)context.Variables["oaClusters"];

                        int remainingBackends = 0;

                        for (int i = 0; i < backends.Count; i++)
                        {
                            JObject backend = (JObject)backends[i];

                            if (!backend.Value<bool>("isThrottling"))
                            {
                                remainingBackends++;
                            }
                        }

                        return remainingBackends;
                    }" />
			</when>
		</choose>
	</retry>
</fragment>